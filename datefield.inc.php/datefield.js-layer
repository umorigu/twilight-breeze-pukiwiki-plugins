/* *******************************************************************
 * datefield.js ( layer version ) : modified by jjyun (2003-2006) Layer-Ver.1.3
 *   based on calendar.js : by Toshirou Takahashi 
 * ------------------------------------------------------------------
 * calendar.js Copyright(c)1999 Toshirou Takahashi tato@fureai.or.jp
 * Support http://www.fureai.or.jp/~tato/JS/BOOK/INDEX.HTM
 * ------------------------------------------------------------------
 *
 * other refference pages..
 *  - http://tohoho.wakusei.ne.jp/js/
 *  - http://member.nifty.ne.jp/masarl/article/js-oop.html
 *  - http://www.amanojaku.net/jsmemo/dragimg.html
 *  - http://www.din.or.jp/~hagi3/JavaScript/JSTips/Default.htm
 *
 ********************************************************************
 */

// ===================================================================
// Layer Version 用コード
// DOM= 0 or 1 はこのスクリプトでは対応外とします。
// Functions for CrossBrowser-----------------------------------------
var DOM, isMOZ;
// DOM: 1=NN4, 2=IE4, 3=IE5+, 4=NN6+, 0=Others
DOM = document.all ? 
	( document.getElementById ? 3 : 2 ) : 
		( document.getElementById ? 4 : 
			( document.layers ? 1 : 0 ) );
isMOZ  = navigator.userAgent.indexOf('Gecko') != -1 ? true : false;

// ===================================================================
// === UIコントロール部分(適宜修正してください) ======================
// カレンダ出現位置の調整 (入力テキスト部分からのOffset)
_plugin_datefield_dspCalendar.offsetX = 50;
_plugin_datefield_dspCalendar.offsetY = 30;


if(document.layers)
{
	document.captureEvents(Event.MOUSEMOVE);
	document.captureEvents(Event.MOUSEUP);
}

_plugin_datefield_dragLay = new _plugin_datefield_dragLay(-100,-100);

/********************************************************************
 * ドラッグ可能なレイヤーの作成
 *  Syntax : _plugin_datefield_dragLay( x , y )
 *  例     : _plugin_datefield_dragLay( 100 , 100 )
 * ------------------------------------------------------------------
 */
function _plugin_datefield_dragLay( x, y)
{
	if( DOM <= 1 ) return null;

	this.layerName = 'calendar';   // ドラッグできるようにするレイヤー名
	this.posX    = x;  // 初期left位置
	this.posY    = y;  // 初期top位置
	var _offsetX = 0;
	var _offsetY = 0;
	var _zcount  = 0;


	/* ---------------------------------------------------- */

	function _getDivFromName(idName)
	{
		if( DOM >= 3 ) return document.getElementById(idName);
		if( DOM == 2 ) return document.all(idName);
		return null;
	}

	function _initDivPos()
	{
		if( DOM == 4 )
		{
			divID.style.left = divID.offsetLeft + 'px';
			divID.style.top  = divID.offsetTop  + 'px';
		}
		else if( DOM == 2 || DOM == 1 )
		{
			divID.style.pixelLeft = divID.offsetLeft;
			divID.style.pixelTop  = divID.offsetTop;
		}
	}

	function _getDivLeft()
	{
		if( DOM >= 3 ) return divID.offsetLeft;
		if( DOM == 2 ) return divID.style.pixelLeft;
		return 0;
	}
	
	function _getDivTop()
	{
		if( DOM >= 3 ) return divID.offsetTop;
		if( DOM == 2 ) return divID.style.pixelTop;
		return 0;
	}
	
	function _getPageX(e)
	{
		if( window.opera ) return e.clientX;
		if( DOM== 4 ) return e.clientX + window.scrollX;
		if( DOM== 3 || DOM == 2 ) return document.body.scrollLeft + window.event.clientX;
		return 0;
	}
	
	function _getPageY(e)
	{
		if( window.opera ) return e.clientY;
		if( DOM == 4 ) return e.clientY + window.scrollY;
		if( DOM == 3 || DOM == 2 ) return document.body.scrollTop + window.event.clientY;
		return 0;
	}
	
	// -- レイヤの表示属性の設定
	function _setDivVisibility(visible)
	{
		if( DOM > 0 ) divID.style.visibility = (visible) ? 'visible' : 'hidden';
	}
	
	// -- 奥行き表示の設定
	function _setDivZIndex(order)
	{
		divID.style.zIndex=order;
	}
	
	function _outputDivHTML(html)
	{
		divID.innerHTML = html;
	}

	function _moveDivPos( movetoX, movetoY)
	{
		if( DOM == 4 || window.opera )
		{
			divID.style.left = movetoX + 'px';
			divID.style.top  = movetoY + 'px';
		}
		if( DOM == 3 || DOM == 2 )
		{
			divID.style.pixelLeft = movetoX;
			divID.style.pixelTop  = movetoY;
		}
	}

	function _mmove(e)
	{
		if( ! window.clickElement ) return false;
	
		var movetoX = _getPageX(e) - _offsetX;
		var movetoY = _getPageY(e) - _offsetY;
		_moveDivPos( movetoX, movetoY);
		return false;
	}
	
	
	//--マウスボタンを押し下げた時
	//  レイヤー内のカーソルoffset位置取得
	function _mdown(e)
	{
		if(isMOZ)
		{   //n6,m1用
			if(e.currentTarget.className != 'dragLays') return false;
			else clickElement = e.currentTarget.id;
		}
	
		if( ! window.clickElement ) return false;

		_offsetX = _getPageX(e) - _getDivLeft();
		_offsetY = _getPageY(e) - _getDivTop();
		return false;
	}

	//--マウスボタンを上げた時ドラッグ解除
	function _mup(e)
	{
		if( ! window.clickElement) return false;

		_setDivZIndex( _zcount );
		_zcount++;

		clickElement = null;
		return false;
	}

	//--イベントキャプチャー開始
	function _setEventHandle()
	{
		document.onmousemove = _mmove;
		document.onmouseup = _mup;
		if(isMOZ) document.onmousedown = _mdown; //m1,n6用
			
	}

	//--イベントキャプチャー停止
	function _removeEventHandle()
	{
		document.onmousemove = null;
		document.onmouseup   = null;
		if( isMOZ )	document.onmousedown = null;
		
		_offsetX = 0;
		_offsetY = 0;
		_zcount  = 0;
	}

	/* ---------------------------------------------------------------------------------- */
	
	//メソッドを追加
	_plugin_datefield_dragLay.prototype.moveDivPos   = _moveDivPos;
	_plugin_datefield_dragLay.prototype.mdown        = _mdown;
	_plugin_datefield_dragLay.prototype.outputDivHTML= _outputDivHTML;
	_plugin_datefield_dragLay.prototype.getPageX     = _getPageX;
	_plugin_datefield_dragLay.prototype.getPageY     = _getPageY;
	_plugin_datefield_dragLay.prototype.setDivVisibility   = _setDivVisibility;
	_plugin_datefield_dragLay.prototype.setEventHandle     = _setEventHandle;
	_plugin_datefield_dragLay.prototype.removeEventHandle  = _removeEventHandle;
	/* ---------------------------------------------------------------------------------- */

	// n4以外用
	this.div='<div  id="' + this.layerName + '" class="dragLays"\n'
		  + '      onmousedown="clickElement=\''+ this.layerName
		  +'\';_plugin_datefield_dragLay.mdown(event);return false"\n'
		  + '      style="position:absolute;left:' + this.posX + 'px;top:' + this.posY + 'px">\n'
		  + '</div>\n';
	document.write(this.div);

	var divID   = _getDivFromName( this.layerName );
	var self = this;

	_initDivPos();

	return null;
}

// 注意: stdMonth は 1月が0、... 12月は11 で指定すること
function _plugin_datefield_dspCalendar(obj, event, dateFormatType, diffMonth, stdYear, stdMonth, stdDay, doSubmit, doReset)
{

	/********************************************************************
	 * 指定形式に沿った日付文字列の作成
	 *  Syntax : _dateWithFormat(dateFormatType , wrtYYYY , wrtMM , wrtDD )
	 *  例     : _dateWithFormat('YYYY/MM/DD', 2003 , 10 , 3 )
	 * ------------------------------------------------------------------
	 */
	function _dateWithFormat(dateFormatType , wrtYYYY , wrtMM , wrtDD )
	{
		var strWithFormat = "" + dateFormatType;
		var wrtYY = wrtYYYY%100;
		wrtMM += 1;
		if ( wrtYY < 10) { wrtYY = "0" + wrtYY; }
		if ( wrtMM < 10) { wrtMM = "0" + wrtMM; }
		if ( wrtDD < 10) { wrtDD = "0" + wrtDD; }
		strWithFormat = strWithFormat.replace(/YYYY/gi,wrtYYYY);
		strWithFormat = strWithFormat.replace(/YY/gi,wrtYY);
		strWithFormat = strWithFormat.replace(/MM/gi,wrtMM);
		strWithFormat = strWithFormat.replace(/DD/gi,wrtDD);
		
		return strWithFormat;
	}

	/********************************************************************
	 * カレンダーを呼び出す<input>フィールド文字列の作成
	 *  Syntax : _getCallCalendarScript(rObj, rThis, tags, diff)
	 *  例     : _getCallCalendarScript(obj, this , "now" , -1 )
	 * ------------------------------------------------------------------
	 */
	function _getCallCalendarScript(rObj,rThis, tags, diff)
	{
		var strRtn;
	
		strRtn = '<input type="button" value="' + tags + '"'
		  + ' onclick="_plugin_datefield_dspCalendar(window.document.'
		  +  rObj.form.name + '.' + rObj.name  + ' ,null, '
		  + rThis.dateFormatType + ', ' + diff
		  + ', ' + rThis.stdyear + ', ' + rThis.stdmonth + ', ' + rThis.stdday 
		  + ', ' + rThis.doSubmit + ');" />\n';
		return strRtn;
	}

	/* ---------------------------------------------------------------------- */

	_plugin_datefield_dragLay.setDivVisibility( true );
	_plugin_datefield_dragLay.removeEventHandle(); // イベントキャプチャーリセット
	_plugin_datefield_dragLay.setEventHandle(); // イベントキャプチャースタート

	// 現在の時間情報の取得
	this.now =  new Date();
	this.nowyear  = this.now.getFullYear();
	this.nowmonth = this.now.getMonth() ;
	this.nowdate  = this.now.getDate(); 
	
	this.dateFormatType = ( ! arguments[2] ) ? '\'YYYY/MM/DD\'' : '\''+ dateFormatType + '\'';

	if( isNaN(this.diffMonth) )	this.diffMonth = 0;
	if( ! arguments[3] ) diffMonth = 0;

	// カレンダ表示月基準日情報
	this.stdyear  = ( ! arguments[4] ) ? this.nowyear  : stdYear; 
	this.stdmonth = ( ! arguments[5] ) ? this.nowmonth : stdMonth; 
	this.stdday   = ( ! arguments[6] ) ? this.nowday   : stdDay;

	// カレンダーでの変更の即時反映の有無(default: 即時反映)
	this.doSubmit  = ( ! arguments[7] ) ? 0 : ( ( doSubmit == 1 ) ? 1 : 0 );

	// doReset
	this.diffMonth = ( ! arguments[8] ) ? this.diffMonth + diffMonth : 0 ;


	var cldrDate = new Date(this.stdyear, this.stdmonth + this.diffMonth , 1);
  
	var browserLang;
	switch ( DOM )
	{
	case 4:
		browserLang = window.navigator.language.substr(0,2);
		break;
	case 3:
	case 2:
		browserLang = window.navigator.browserLanguage;
		break;
	default:
		browserLang = "en";
		break;
	}

	// 週の設定
	if( browserLang.search(/ja/i) != -1 && "あ".length == 1 )
	{
		this.week = new Array('日','月','火','水','木','金','土');
		this.titleToday = '今日：';
	}
	else
	{
		this.week = new Array('Sun','Mon','Tue','Wed','Thr','Fri','Sat');
		this.titleToday = 'Today:';
	}

	// カレンダー構築用HTML(ヘッダー)
	_plugin_datefield_dspCalendar.headHTML = '  <form>\n'
	  + '  <table border="0" width="140" class="datefield"> \n';

	// カレンダー構築用HTML(フッター)
	// ステータス行 日付タイプ
	_plugin_datefield_dspCalendar.footHTML = '<tr>\n'
	  + '  <td colspan="7" align="center" class="datefield-footer">\n'
	  + '<b> ' + this.titleToday 
	  
	  // 今日の日付もリンク扱いにする
	  + '<a href="javascript:function lay_v(){ ' //"
	  + 'document.' + obj.form.name + '.' + obj.name
	  + '.value=('
	  + _dateWithFormat(this.dateFormatType, this.nowyear, this.nowmonth, this.nowdate )+ ');'
	  + '_plugin_datefield_dragLay.removeEventHandle(); ';

	if(this.doSubmit == 1)
	{
		_plugin_datefield_dspCalendar.footHTML += 'document.' + obj.form.name + '.submit();';
	}

	_plugin_datefield_dspCalendar.footHTML += '_plugin_datefield_dragLay.setDivVisibility(false); };lay_v()" >\n'
	  + _dateWithFormat( this.dateFormatType , this.nowyear,  this.nowmonth ,this.nowdate) + '</b>'
	  + '</a>'
	  + ' </td>\n</tr>\n'
	  + '<tr>\n  <td colspan="7" align="center" class="datefield-footer">\n';

	var skip_mm;
	// display now button	
	skip_mm = ( -12*(this.stdyear - this.nowyear) - (this.stdmonth - this.nowmonth) - this.diffMonth );
	_plugin_datefield_dspCalendar.footHTML += _getCallCalendarScript(obj, this, "now",skip_mm);

	// display close button.
	_plugin_datefield_dspCalendar.footHTML += '<input type="button" value="close" \n'
	  + 'onclick="_plugin_datefield_dragLay.setDivVisibility(false); '
	  +	'document.' + obj.form.name + '.calendar.checked=false;'
	  + '_plugin_datefield_dragLay.removeEventHandle(); "> \n';
	  
	// display reset button.
	skip_mm = -1 * this.diffMonth;
	_plugin_datefield_dspCalendar.footHTML += _getCallCalendarScript(obj,this,"reset",skip_mm);
	
	//
	_plugin_datefield_dspCalendar.footHTML += ' </td>\n'
	  + '</tr>\n\n'
	  + '</table>\n'
	  + '</form>\n';
	
	// カレンダー表示月情報の取得とタイトルの作成
	var dspYYYY = cldrDate.getFullYear();
	var dspMM  = cldrDate.getMonth();
	var tDspMM = dspMM+1;
	tDspMM = ( tDspMM < 10 ) ? "0" + tDspMM : tDspMM ; 
	var titleDspMonth = dspYYYY + '/' + tDspMM;
	
	// カレンダー構築用HTML(ヘッダ付与)
	var cldrHTML = _plugin_datefield_dspCalendar.headHTML;

	// カレンダー構築用HTML(動的変更部分): Month
	cldrHTML += '<tr class="datefield-month">\n'
	  + '<th colspan="7" align="center">\n';
	
	// 先月へのボタン表示	
	cldrHTML += _getCallCalendarScript(obj,this,"&lt;&lt;", -1);
	
	cldrHTML += titleDspMonth + '\n';
	
	// 次月へのボタン表示	
	cldrHTML += _getCallCalendarScript(obj,this,"&gt;&gt;", 1);
	
	cldrHTML += ' </th>\n</tr>\n';
	
	// カレンダー構築用HTML(動的変更部分): Week
	cldrHTML += ' <tr> \n';
	for ( i = 0 ; i < 7 ; i++ )
	{
		cldrHTML += '     <td class="datefield-week">\n' + this.week[i] +  '   </td>\n';
	}
	cldrHTML += '  </tr>\n';
	
	// Date
	//  - 表示月のカレンダーの最初の日曜日にあたる日付の取得
	cldrDate.setDate( -(cldrDate.getDay()-1) );
	var wrtDate = new Date(cldrDate.getFullYear(),cldrDate.getMonth(),cldrDate.getDate());
	
	var stdTime = cldrDate.getTime();
	var wrtDD, wrtMM, wrtYY, wrtYYYY;
	for( weekcnt=0; weekcnt < 6; weekcnt++ )
	{
		cldrHTML += '   <tr>\n';
		
		for( daycnt=0; daycnt < 7; daycnt++ )
		{
			// setTime を用いて基準日から1日単位にずらす。
			// setTime で取扱う単位はミリ秒単位(setDate()を差分情報では扱えられない)
			wrtDate.setTime(stdTime + (weekcnt*7 + daycnt) * (24*60*60*1000)); 
			wrtDD   = wrtDate.getDate();
			wrtMM   = wrtDate.getMonth();
			wrtYYYY = wrtDate.getFullYear();
			// wrtDay  = wrtDate.getDay();

			if( wrtYYYY == this.nowyear && wrtMM == this.nowmonth && wrtDD == this.nowdate )
			{
				cldrHTML += '   <td class="datefield-now">\n';
			}
			else if(wrtYYYY == this.stdyear  && wrtMM   == this.stdmonth && wrtDD  == this.stdday )
			{
				cldrHTML += '   <td class="datefield-std">\n';
			}
			else if(wrtYYYY == dspYYYY && wrtMM   == dspMM )
			{
//	      if(wrtDay == 0) cldrHTML += _plugin_datefield_dspCalendar.dateSunBgColor;
//  	 else if(wrtDay == 6) cldrHTML += _plugin_datefield_dspCalendar.dateSatBgColor;
//       else                 cldrHTML += _plugin_datefield_dspCalendar.dateSameMonthBgColor;
				cldrHTML += '   <td class="datefield-samemonth">\n';
			}
			else
			{ 
				cldrHTML += '   <td class="datefield-diffmonth">\n';
			}

			cldrHTML += '<a href="javascript:function lay_v(){ ' //"
			  + 'document.' + obj.form.name + '.' + obj.name
			  + '.value=('
			  + _dateWithFormat(this.dateFormatType, wrtYYYY, wrtMM, wrtDD )+ ');'
			  + '_plugin_datefield_dragLay.removeEventHandle(); ';
			
			if(this.doSubmit == 1)
			{
				cldrHTML += 'document.' + obj.form.name + '.submit();';
			}
			cldrHTML += '_plugin_datefield_dragLay.setDivVisibility(false); };lay_v()" >\n' //"
			  + wrtDD + '</a> </td>\n';
		}
		cldrHTML += '</tr>\n';
	}

	// カレンダー構築用HTML(フッタ付与)
	cldrHTML += _plugin_datefield_dspCalendar.footHTML;
		
	_plugin_datefield_dragLay.outputDivHTML('');       //一時クリア
	_plugin_datefield_dragLay.outputDivHTML(cldrHTML);
	
	if( event !== null )
	{
		var left, top;
		left = _plugin_datefield_dragLay.getPageX(event) + _plugin_datefield_dspCalendar.offsetX;
		top  = _plugin_datefield_dragLay.getPageY(event) + _plugin_datefield_dspCalendar.offsetY;
		_plugin_datefield_dragLay.moveDivPos( left, top );
	}
}

/* **************** */

function _plugin_datefield_initField()
{
	for( var i=0; i < document.forms.length; i++ )
	{
		formName = document.forms[i].name;
		if( formName.length == undefined ) return;

		if( formName.indexOf( "datefield", 0) >= 0)
		{
			//for NN6,Mozilla,IE5
			if(document.getElementById)
			{
				document.forms[i].infield.disabled = true;
				document.forms[i].calendar.disabled = true;
				document.forms[i].calendar.checked = false;
			}
		}
	}
}

function _plugin_datefield_changeMode( obj, imgEdit, imgRefer, imagePath)
{
	imgPathEdit  = "" + imagePath + imgEdit;
	imgPathRefer = "" + imagePath + imgRefer;
	
	// for NN6,Mozilla,IE5
	if(document.getElementById) 
	{	
		if( obj.editTrigger.src.indexOf( imgEdit ) >= 0 )
		{
			obj.editTrigger.src  = imgPathRefer;
			obj.infield.disabled = false;
			obj.calendar.disabled = false;
		}
	    else
		{
			obj.editTrigger.src  = imgPathEdit;
			obj.infield.disabled = true;
			obj.calendar.disabled = true;
			obj.calendar.checked = false;
			_plugin_datefield_dragLay.setDivVisibility(false);
		}
	}
}

function _plugin_datefield_onclickClndrModal( obj, event,format, year, month, day)
{
	if(document.getElementById) 
	{	
		if( obj.calendar.checked == true )
		{
			_plugin_datefield_dspCalendar(obj.infield, event, format, 0, year, month-1, day,1 , true);

			// remove the check in other checkbuttons. 
			for( var i=0; i < document.forms.length; i++ )
			{
				formName = document.forms[i].name;
				if( formName.length == undefined ) return;

				//for NN6,Mozilla,IE5
				if( formName.indexOf( "datefield", 0) >= 0 && document.getElementById )
				{
					if( obj != document.forms[i] )
						document.forms[i].calendar.checked = false;
				}
			}
		}
		else
		{
			_plugin_datefield_dragLay.setDivVisibility(false);
		}
	}

}

try{
	window.addEventListener('load', _plugin_datefield_initField, false );
}
catch (e)
{
	window.attachEvent('onload',  _plugin_datefield_initField );
}
